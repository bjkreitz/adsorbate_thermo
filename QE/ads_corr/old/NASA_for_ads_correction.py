#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Mar  8 21:02:06 2022

@author: bkr
"""

 # A script that generates an adsorption corrections file when adsorbate and corresponding gas-phase thermodata.csv files as well as a .connectivity file for each adsorbate are present.
 # Example csv files, generated by copying data from the thermodata.py files, are included in this directory.
 # .connectivity files corresponding to the included csv files are in the C/H/N/O directories
 # This script is written by Katrín Blöndal at Brown University.

import sys, os
import fnmatch
g=open("Pt_adsorption_corrections.py",'w')
g.write("#!/usr/bin/env python \n")
g.write("# encoding: utf-8 \n")
#Contains the thermochemistry corrections for adsorption on Pt(111) based on DFT frequency calculations of the adsorbed species and their gas-phase precursors.
g.write('\nname = "Surface Adsorption Corrections"\nshortDesc = u""\nlongDesc = u"""\nChanges due to adsorbing on a surface.\nHere, Pt(111)\nNote: "-h" means "horizontal"\n"""')
g.write('\n\nentry( \n    index = 1,')
g.write('\n    label = "R*",')
g.write('\n    group= \n"""\n1 R u0\n2 X u0\n""",\n')
g.write('    thermo=None,\n')
g.write('    shortDesc=u"""Anything adsorbed anyhow.""",\n')
g.write('    longDesc=u"""\n   R\n   x\n***********\nThis node should be empty, ensuring that one of the nodes below is used.\n""",\n)')
index = 1
path='./'
import csv
f = open('Pt_thermodata_adsorbates.csv','r')
ads_reader = csv.reader(f)
input_csv_ads=[]
for row in ads_reader:
    input_csv_ads.append(row)
h = open('Pt_thermodata_gasphase.csv','r')
gas_reader = csv.reader(h)
input_csv_gas=[]
for row in gas_reader:
    input_csv_gas.append(row)
ind = 0
for ads_row in input_csv_ads:
    path='../'
    if ind == 1:
        Temperatures = str(ads_row[1:8])
    elif ind > 1:
        ads_name = ads_row[0].replace('_ads','').replace('[','')
        compare = ads_name.replace('-h','')
        ind_gas = 0
        for gas_row in input_csv_gas:
            if ind_gas > 1:
                gas_name = gas_row[0].replace('_gas','').replace('[','')
                if gas_name == compare:
                    print('match!')
                    print(gas_name)
                    ind_gas +=1
                    g.write('\n\nentry( \n    index = ' + str(index) + ',')
                    g.write('\n    label = "' + str(ads_name.replace('H','R')) + '",')
                    g.write('\n    group = \n"""\n')
                    configfile = [os.path.join(dirpath, f)
                        for dirpath, dirnames, files in os.walk(path)
                        for f in fnmatch.filter(files, ads_name+'.connectivity')]
                    print(configfile)
                    path = str(configfile[0])
                    print(path)
                    input_file = open(path,'r')
                    lines = input_file.readlines()
                    input_file.close()
                    line_count = 1
                    for line in lines:
                        g.write(line.replace('Pt','X ').replace('H','R'))
                        if line_count == 1:
                            if line[-3] == 'S':
                                type_of_bond = 'single'
                            elif line[-3] == 'D':
                                type_of_bond = 'double'
                            elif line[-3] == 'T':
                                type_of_bond = 'triple'
                            elif line[-3] == 'Q':
                                type_of_bond = 'quadruple'
                            else:
                                type_of_bond = 'vdW'
                        elif line_count == 2 and line[2] == 'P':
                            if line[-3] == 'S':
                                if type_of_bond == 'single':
                                    type_of_bond = 'bidentate, twice single'
                                elif type_of_bond == 'double':
                                    type_of_bond = 'bidentate, double- and single'
                                elif type_of_bond == 'triple':
                                    type_of_bond = 'bidentate, triple- and single'
                            elif line[-3] == 'D':
                                if type_of_bond == 'single':
                                    type_of_bond = 'bidentate, single- and double'
                                elif type_of_bond == 'double':
                                    type_of_bond = 'bidentate, twice double'
                                elif type_of_bond == 'triple':
                                    type_of_bond = 'bidentate, triple- and double'
                            elif line[-3] == 'T':
                                if type_of_bond == 'single':
                                    type_of_bond = 'bidentate, single- and triple'
                                elif type_of_bond == 'double':
                                    type_of_bond = 'bidentate, double- and triple'
                                elif type_of_bond == 'triple':
                                    type_of_bond = 'bidentate, twice triple'
                            else:
                                print("Something is wrong")
                            
                        line_count +=1
                    g.write('""",\n')
                    g.write('    thermo=ThermoData(\n        Tdata=(' + str(Temperatures.replace("'","")) + ", 'K'),\n")
                    Cpdiff=[]
                    for i in range(2,9):
                        Cpdiff.append(round(float(ads_row[i])-float(gas_row[i]),2))
                    g.write('        Cpdata=(' + str(Cpdiff) + ", 'cal/(mol*K)'),\n")
                    g.write('        H298=(' + str(round(float(ads_row[12])-float(gas_row[12]),2)) + ", 'kcal/mol'),\n")
                    g.write('        S298=(' + str(round(float(ads_row[15])-float(gas_row[15]),2)) + ", 'cal/(mol*K)'),\n")
                    g.write('    shortDesc=u"""Came from ' + str(ads_name) + ' ' + str(type_of_bond) + '-bonded on Pt(111)""",\n')
                    g.write('    longDesc=u"""Calculated by x at x University using statistical mechanics (files: compute_NASA_for_Pt-adsorbates.ipynb and compute_NASA_for_Pt-gas_phase.ipynb). Based on DFT calculations by x at x. \n***********\n"""')
                    index +=1
                    break
            else:
                ind_gas +=1
    ind +=1
    
g.close()